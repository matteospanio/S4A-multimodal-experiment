<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Controller/TaskController.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Controller/TaskController.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;namespace App\Controller;&#10;&#10;use App\Entity\Trial\Trial;&#10;use App\Form\F2MTrialType;&#10;use App\Form\M2FTrialType;&#10;use App\Service\DataCollector;&#10;use App\Service\StimuliManager;&#10;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;&#10;use Symfony\Component\HttpFoundation\Response;&#10;use Symfony\Component\Routing\Attribute\Route;&#10;&#10;final class TaskController extends AbstractController&#10;{&#10;    public function __construct(&#10;        private readonly StimuliManager $stimuliManager,&#10;        private readonly DataCollector $dataCollector,&#10;    )&#10;    {&#10;    }&#10;&#10;    #[Route('/task/{type}', name: 'app_task', requirements: ['type' =&gt; '\d+'])]&#10;    public function index(int $type = 1): Response&#10;    {&#10;        $task = match ($type) {&#10;            1 =&gt; Trial::MUSICS2SMELL,&#10;            2 =&gt; Trial::SMELLS2MUSIC,&#10;            default =&gt; throw $this-&gt;createNotFoundException('Invalid task type'),&#10;        };&#10;        $trial = $this-&gt;stimuliManager-&gt;getNextTrial($task);&#10;&#10;        $form = match($task) {&#10;            Trial::MUSICS2SMELL =&gt; $this-&gt;createForm(M2FTrialType::class, $trial),&#10;            Trial::SMELLS2MUSIC =&gt; $this-&gt;createForm(F2MTrialType::class, $trial),&#10;            default =&gt; throw $this-&gt;createNotFoundException('Invalid task type'),&#10;        };&#10;&#10;        return $this-&gt;render('task/index.html.twig', [&#10;            'task_type' =&gt; $type,&#10;            'trial' =&gt; $trial,&#10;            'form' =&gt; $form,&#10;            'task_name' =&gt; $type === 1 ? 'Audio-Perfume Matching' : 'Perfume-Audio Association',&#10;        ]);&#10;    }&#10;&#10;    #[Route('/task/vote', name: 'app_task_vote', methods: ['POST'])]&#10;    public function vote(int $type, Trial $trial): Response&#10;    {&#10;        return $this-&gt;redirectToRoute('app_task', ['type' =&gt; $type]);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;namespace App\Controller;&#10;&#10;use App\Entity\Trial\Trial;&#10;use App\Form\F2MTrialType;&#10;use App\Form\M2FTrialType;&#10;use App\Service\DataCollector;&#10;use App\Service\StimuliManager;&#10;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;&#10;use Symfony\Component\HttpFoundation\Request;&#10;use Symfony\Component\HttpFoundation\Response;&#10;use Symfony\Component\Routing\Attribute\Route;&#10;&#10;final class TaskController extends AbstractController&#10;{&#10;    public function __construct(&#10;        private readonly StimuliManager $stimuliManager,&#10;        private readonly DataCollector $dataCollector,&#10;    )&#10;    {&#10;    }&#10;&#10;    #[Route('/task/{type}', name: 'app_task', requirements: ['type' =&gt; '\d+'], methods: ['GET', 'POST'])]&#10;    public function index(Request $request, int $type = 1): Response&#10;    {&#10;        $task = match ($type) {&#10;            1 =&gt; Trial::MUSICS2SMELL,&#10;            2 =&gt; Trial::SMELLS2MUSIC,&#10;            default =&gt; throw $this-&gt;createNotFoundException('Invalid task type'),&#10;        };&#10;        $trial = $this-&gt;stimuliManager-&gt;getNextTrial($task);&#10;&#10;        $form = match($task) {&#10;            Trial::MUSICS2SMELL =&gt; $this-&gt;createForm(M2FTrialType::class, $trial),&#10;            Trial::SMELLS2MUSIC =&gt; $this-&gt;createForm(F2MTrialType::class, $trial),&#10;            default =&gt; throw $this-&gt;createNotFoundException('Invalid task type'),&#10;        };&#10;&#10;        $form-&gt;handleRequest($request);&#10;&#10;        if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {&#10;            $choice = $form-&gt;get('choice')-&gt;getData();&#10;            $this-&gt;dataCollector-&gt;recordVote($choice, $trial);&#10;            return $this-&gt;redirectToRoute('app_task', ['type' =&gt; $type]);&#10;        }&#10;&#10;        return $this-&gt;render('task/index.html.twig', [&#10;            'task_type' =&gt; $type,&#10;            'trial' =&gt; $trial,&#10;            'form' =&gt; $form,&#10;            'task_name' =&gt; $type === 1 ? 'Audio-Perfume Matching' : 'Perfume-Audio Association',&#10;        ]);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Service/StimuliManager.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Service/StimuliManager.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;namespace App\Service;&#10;&#10;use App\Entity\Stimulus\Flavor;&#10;use App\Entity\Stimulus\Song;&#10;use App\Entity\Trial\FlavorToMusicTrial;&#10;use App\Entity\Trial\MusicToFlavorTrial;&#10;use App\Entity\Trial\Trial;&#10;use App\Repository\FlavorRepository;&#10;use App\Repository\SongRepository;&#10;use Doctrine\Common\Collections\Collection;&#10;&#10;/**&#10; * This service is responsible to manage the stimuli presentation logic.&#10; * Its main purpose is to decide which trial should be presented to the participant.&#10; *&#10; * @author Matteo Spanio &lt;spanio@dei.unipd.it&gt;&#10; */&#10;final readonly class StimuliManager&#10;{&#10;    public function __construct(&#10;        private FlavorRepository $flavorRepository,&#10;        private SongRepository   $songRepository&#10;    ) {&#10;    }&#10;&#10;    /**&#10;     * @template T of Trial&#10;     * Get the next trial for a participant based on balanced combination logic.&#10;     *&#10;     * @param string $taskType Either Trial::SMELLS2MUSIC or Trial::MUSICS2SMELL&#10;     * @return T Trial data with stimuli information&#10;     */&#10;    public function getNextTrial(string $taskType): Trial&#10;    {&#10;        $flavors = $this-&gt;flavorRepository-&gt;findAll();&#10;&#10;        if (count($flavors) &lt; 2) {&#10;            throw new \RuntimeException('At least 2 flavors are required for trial generation.');&#10;        }&#10;&#10;        return match ($taskType) {&#10;            Trial::SMELLS2MUSIC =&gt; $this-&gt;generateBalancedSmells2MusicTrial($flavors),&#10;            Trial::MUSICS2SMELL =&gt; $this-&gt;generateBalancedMusics2SmellTrial($flavors),&#10;            default =&gt; throw new \InvalidArgumentException('Invalid task type: ' . $taskType),&#10;        };&#10;    }&#10;&#10;    /**&#10;     * Generate a balanced trial for the Smells to Music task.&#10;     * This version ensures better distribution of flavor combinations.&#10;     *&#10;     * @param Flavor[] $flavors&#10;     * @return FlavorToMusicTrial&#10;     */&#10;    private function generateBalancedSmells2MusicTrial(array $flavors): FlavorToMusicTrial&#10;    {&#10;        $trial = new FlavorToMusicTrial();&#10;&#10;        // Get a balanced combination of flavors&#10;        $combination = $this-&gt;getBalancedFlavorCombination($flavors);&#10;        $primaryFlavorId = $combination['primary'];&#10;        $secondaryFlavorId = $combination['secondary'];&#10;&#10;        foreach ($flavors as $flavor) {&#10;            if ($flavor-&gt;getId() === $primaryFlavorId) {&#10;                $trial-&gt;addFlavor($flavor);&#10;            }&#10;            if ($flavor-&gt;getId() === $secondaryFlavorId) {&#10;                $trial-&gt;addFlavor($flavor);&#10;            }&#10;        }&#10;&#10;        // Get songs for the primary flavor&#10;        $selectedSong = $this-&gt;randomPick($trial-&gt;getFlavors()-&gt;first()-&gt;getSongs());&#10;        $trial-&gt;setSong($selectedSong);&#10;&#10;        return $trial;&#10;    }&#10;&#10;    /**&#10;     * Generate a balanced trial for the Musics to Smell task.&#10;     * This version ensures better distribution of flavor combinations.&#10;     *&#10;     * @param Flavor[] $flavors&#10;     * @return MusicToFlavorTrial&#10;     */&#10;    private function generateBalancedMusics2SmellTrial(array $flavors): MusicToFlavorTrial&#10;    {&#10;        // Get a balanced combination of flavors&#10;        $combination = $this-&gt;getBalancedFlavorCombination($flavors);&#10;        $firstFlavorId = $combination['primary'];&#10;        $secondFlavorId = $combination['secondary'];&#10;&#10;        // Find the actual flavor objects&#10;        $firstFlavor = null;&#10;        $secondFlavor = null;&#10;&#10;        foreach ($flavors as $flavor) {&#10;            if ($flavor-&gt;getId() === $firstFlavorId) {&#10;                $firstFlavor = $flavor;&#10;            }&#10;            if ($flavor-&gt;getId() === $secondFlavorId) {&#10;                $secondFlavor = $flavor;&#10;            }&#10;        }&#10;&#10;        if (!$firstFlavor || !$secondFlavor) {&#10;            throw new \RuntimeException('Could not find flavors for balanced combination.');&#10;        }&#10;&#10;        // Get songs for each flavor&#10;        $firstFlavorSongs = $this-&gt;songRepository-&gt;findBy(['flavor' =&gt; $firstFlavor]);&#10;        $secondFlavorSongs = $this-&gt;songRepository-&gt;findBy(['flavor' =&gt; $secondFlavor]);&#10;&#10;        if (empty($firstFlavorSongs)) {&#10;            throw new \RuntimeException('No songs found for flavor: ' . $firstFlavor-&gt;getName());&#10;        }&#10;&#10;        if (empty($secondFlavorSongs)) {&#10;            throw new \RuntimeException('No songs found for flavor: ' . $secondFlavor-&gt;getName());&#10;        }&#10;&#10;        // Pick random songs from each flavor&#10;        $firstSong = $firstFlavorSongs[array_rand($firstFlavorSongs)];&#10;        $secondSong = $secondFlavorSongs[array_rand($secondFlavorSongs)];&#10;&#10;        return [&#10;            'taskType' =&gt; Trial::MUSICS2SMELL,&#10;            'primarySong' =&gt; $firstSong,&#10;            'secondarySong' =&gt; $secondSong,&#10;            'primaryFlavor' =&gt; $firstFlavor,&#10;            'secondaryFlavor' =&gt; $secondFlavor,&#10;            'songLabels' =&gt; $this-&gt;getRandomizedSongLabels([$firstSong, $secondSong]),&#10;            'combination' =&gt; $combination&#10;        ];&#10;    }&#10;&#10;    /**&#10;     * Get a balanced flavor combination using a simple round-robin approach.&#10;     * This ensures all combinations are presented with roughly equal frequency.&#10;     *&#10;     * @param Flavor[] $flavors&#10;     * @return array&#10;     */&#10;    private function getBalancedFlavorCombination(array $flavors): array&#10;    {&#10;        $allCombinations = $this-&gt;getAllPossibleCombinations($flavors);&#10;&#10;        // For simplicity, use a time-based pseudo-random selection that cycles through combinations&#10;        // In a real application, this could be enhanced with session storage or database tracking&#10;        $index = (int)(time() / 60) % count($allCombinations); // Changes every minute&#10;        $selectedCombination = $allCombinations[$index];&#10;&#10;        // Add some randomness while maintaining balance&#10;        $randomOffset = rand(0, 2); // Small random offset to avoid strict predictability&#10;        $balancedIndex = ($index + $randomOffset) % count($allCombinations);&#10;&#10;        return $allCombinations[$balancedIndex];&#10;    }&#10;&#10;    /**&#10;     * Get randomized flavor labels to avoid bias effects.&#10;     *&#10;     * @param Flavor[] $flavors&#10;     * @return array&#10;     */&#10;    private function getRandomizedFlavorLabels(array $flavors): array&#10;    {&#10;        $labels = [];&#10;        foreach ($flavors as $flavor) {&#10;            $labels[] = [&#10;                'id' =&gt; $flavor-&gt;getId(),&#10;                'name' =&gt; $flavor-&gt;getName(),&#10;                'icon' =&gt; $flavor-&gt;getIcon()&#10;            ];&#10;        }&#10;&#10;        shuffle($labels);&#10;        return $labels;&#10;    }&#10;&#10;    /**&#10;     * Get randomized song labels to avoid bias effects.&#10;     *&#10;     * @param Song[] $songs&#10;     * @return array&#10;     */&#10;    private function getRandomizedSongLabels(array $songs): array&#10;    {&#10;        $labels = [];&#10;        foreach ($songs as $song) {&#10;            $labels[] = [&#10;                'id' =&gt; $song-&gt;getId(),&#10;                'url' =&gt; $song-&gt;getUrl(),&#10;                'prompt' =&gt; $song-&gt;getPrompt()&#10;            ];&#10;        }&#10;&#10;        shuffle($labels);&#10;        return $labels;&#10;    }&#10;&#10;    /**&#10;     * Get all possible flavor combinations for balanced presentation.&#10;     * With 4 flavors, this generates 2^4 = 16 combinations.&#10;     *&#10;     * @param Flavor[] $flavors&#10;     * @return array&#10;     */&#10;    public function getAllPossibleCombinations(array $flavors): array&#10;    {&#10;        $combinations = [];&#10;&#10;        // Generate all possible pairs of flavors&#10;        for ($i = 0; $i &lt; count($flavors); $i++) {&#10;            for ($j = 0; $j &lt; count($flavors); $j++) {&#10;                if ($i !== $j) {&#10;                    $combinations[] = [&#10;                        'primary' =&gt; $flavors[$i]-&gt;getId(),&#10;                        'secondary' =&gt; $flavors[$j]-&gt;getId()&#10;                    ];&#10;                }&#10;            }&#10;        }&#10;&#10;        return $combinations;&#10;    }&#10;&#10;    /**&#10;     * Pick a random element from a Doctrine Collection.&#10;     * @template T&#10;     * @param Collection&lt;int, T&gt; $collection&#10;     * @return T|null&#10;     */&#10;    private function randomPick(Collection $collection): mixed&#10;    {&#10;        if ($collection-&gt;isEmpty()) {&#10;            return null;&#10;        }&#10;&#10;        $array = $collection-&gt;toArray();&#10;        return $array[array_rand($array)];&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;namespace App\Service;&#10;&#10;use App\Entity\Stimulus\Flavor;&#10;use App\Entity\Stimulus\Song;&#10;use App\Entity\Trial\FlavorToMusicTrial;&#10;use App\Entity\Trial\MusicToFlavorTrial;&#10;use App\Entity\Trial\Trial;&#10;use App\Repository\FlavorRepository;&#10;use App\Repository\SongRepository;&#10;use Doctrine\Common\Collections\Collection;&#10;&#10;/**&#10; * Service per la gestione della logica di presentazione degli stimoli.&#10; */&#10;final readonly class StimuliManager&#10;{&#10;    public function __construct(&#10;        private FlavorRepository $flavorRepository,&#10;        private SongRepository   $songRepository&#10;    ) {&#10;    }&#10;&#10;    /**&#10;     * Genera il prossimo trial bilanciato, senza ripetizioni di combinazioni.&#10;     *&#10;     * @param string $taskType Trial::SMELLS2MUSIC o Trial::MUSICS2SMELL&#10;     * @param array $usedCombinations Elenco combinazioni già usate (persistente per partecipante)&#10;     * @return Trial&#10;     */&#10;    public function getNextTrial(string $taskType, array $usedCombinations = []): Trial&#10;    {&#10;        $flavors = $this-&gt;flavorRepository-&gt;findAll();&#10;        $songs = $this-&gt;songRepository-&gt;findAll();&#10;&#10;        if (count($flavors) &lt; 2 || count($songs) &lt; 2) {&#10;            throw new \RuntimeException('Servono almeno 2 profumi e 2 canzoni.');&#10;        }&#10;&#10;        return match ($taskType) {&#10;            Trial::SMELLS2MUSIC =&gt; $this-&gt;generateFlavorToMusicTrial($flavors, $songs, $usedCombinations),&#10;            Trial::MUSICS2SMELL =&gt; $this-&gt;generateMusicToFlavorTrial($flavors, $songs, $usedCombinations),&#10;            default =&gt; throw new \InvalidArgumentException('Tipo task non valido: ' . $taskType),&#10;        };&#10;    }&#10;&#10;    /**&#10;     * Genera un trial Flavor→Music (2 profumi, 1 canzone).&#10;     */&#10;    private function generateFlavorToMusicTrial(array $flavors, array $songs, array $usedCombinations): FlavorToMusicTrial&#10;    {&#10;        $allCombos = $this-&gt;getAllFlavorToMusicCombinations($flavors, $songs);&#10;        $available = $this-&gt;filterUnusedCombinations($allCombos, $usedCombinations);&#10;&#10;        if (empty($available)) {&#10;            // Tutte le combinazioni già usate: si ricomincia&#10;            $available = $allCombos;&#10;        }&#10;&#10;        $combo = $available[array_rand($available)];&#10;&#10;        // Randomizza ordine dei profumi&#10;        $flavorObjs = [$combo['flavor1'], $combo['flavor2']];&#10;        shuffle($flavorObjs);&#10;&#10;        $trial = new FlavorToMusicTrial();&#10;        $trial-&gt;addFlavor($flavorObjs[0]);&#10;        $trial-&gt;addFlavor($flavorObjs[1]);&#10;        $trial-&gt;setSong($combo['song']);&#10;&#10;        return $trial;&#10;    }&#10;&#10;    /**&#10;     * Genera un trial Music→Flavor (2 canzoni, 1 profumo).&#10;     */&#10;    private function generateMusicToFlavorTrial(array $flavors, array $songs, array $usedCombinations): MusicToFlavorTrial&#10;    {&#10;        $allCombos = $this-&gt;getAllMusicToFlavorCombinations($flavors, $songs);&#10;        $available = $this-&gt;filterUnusedCombinations($allCombos, $usedCombinations);&#10;&#10;        if (empty($available)) {&#10;            $available = $allCombos;&#10;        }&#10;&#10;        $combo = $available[array_rand($available)];&#10;&#10;        // Randomizza ordine delle canzoni&#10;        $songObjs = [$combo['song1'], $combo['song2']];&#10;        shuffle($songObjs);&#10;&#10;        $trial = new MusicToFlavorTrial();&#10;        $trial-&gt;addSong($songObjs[0]);&#10;        $trial-&gt;addSong($songObjs[1]);&#10;        $trial-&gt;setFlavor($combo['flavor']);&#10;&#10;        return $trial;&#10;    }&#10;&#10;    /**&#10;     * Restituisce tutte le combinazioni possibili per Flavor→Music.&#10;     * Ogni combinazione: 2 profumi distinti, 1 canzone il cui intendedFlavor è uno dei due.&#10;     * @return array [['flavor1'=&gt;Flavor, 'flavor2'=&gt;Flavor, 'song'=&gt;Song, 'comboKey'=&gt;string], ...]&#10;     */&#10;    public function getAllFlavorToMusicCombinations(array $flavors, array $songs): array&#10;    {&#10;        $combos = [];&#10;        foreach ($flavors as $f1) {&#10;            foreach ($flavors as $f2) {&#10;                if ($f1 === $f2) continue;&#10;                foreach ($songs as $song) {&#10;                    $intended = $song-&gt;getIntendedFlavor();&#10;                    if ($intended &amp;&amp; ($intended === $f1 || $intended === $f2)) {&#10;                        // Chiave unica per la combinazione (id profumi ordinati + id canzone)&#10;                        $ids = [$f1-&gt;getId(), $f2-&gt;getId()];&#10;                        sort($ids);&#10;                        $comboKey = implode('-', $ids) . '-' . $song-&gt;getId();&#10;                        $combos[] = [&#10;                            'flavor1' =&gt; $f1,&#10;                            'flavor2' =&gt; $f2,&#10;                            'song' =&gt; $song,&#10;                            'comboKey' =&gt; $comboKey&#10;                        ];&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        return $combos;&#10;    }&#10;&#10;    /**&#10;     * Restituisce tutte le combinazioni possibili per Music→Flavor.&#10;     * Ogni combinazione: 2 canzoni con intendedFlavor diversi, 1 profumo che corrisponde a uno dei due.&#10;     * @return array [['song1'=&gt;Song, 'song2'=&gt;Song, 'flavor'=&gt;Flavor, 'comboKey'=&gt;string], ...]&#10;     */&#10;    public function getAllMusicToFlavorCombinations(array $flavors, array $songs): array&#10;    {&#10;        $combos = [];&#10;        foreach ($songs as $s1) {&#10;            foreach ($songs as $s2) {&#10;                if ($s1 === $s2) continue;&#10;                $f1 = $s1-&gt;getIntendedFlavor();&#10;                $f2 = $s2-&gt;getIntendedFlavor();&#10;                if (!$f1 || !$f2 || $f1 === $f2) continue;&#10;                foreach ([$f1, $f2] as $flavor) {&#10;                    // Chiave unica per la combinazione (id canzoni ordinati + id profumo)&#10;                    $ids = [$s1-&gt;getId(), $s2-&gt;getId()];&#10;                    sort($ids);&#10;                    $comboKey = implode('-', $ids) . '-' . $flavor-&gt;getId();&#10;                    $combos[] = [&#10;                        'song1' =&gt; $s1,&#10;                        'song2' =&gt; $s2,&#10;                        'flavor' =&gt; $flavor,&#10;                        'comboKey' =&gt; $comboKey&#10;                    ];&#10;                }&#10;            }&#10;        }&#10;        return $combos;&#10;    }&#10;&#10;    /**&#10;     * Filtra le combinazioni già usate.&#10;     * @param array $allCombos&#10;     * @param array $usedCombinations array di comboKey già usate&#10;     * @return array&#10;     */&#10;    private function filterUnusedCombinations(array $allCombos, array $usedCombinations): array&#10;    {&#10;        return array_values(array_filter($allCombos, fn($c) =&gt; !in_array($c['comboKey'], $usedCombinations, true)));&#10;    }&#10;&#10;    /**&#10;     * Helper: restituisce tutte le chiavi delle combinazioni possibili per il task richiesto.&#10;     * @param string $taskType&#10;     * @return string[]&#10;     */&#10;    public function getAllCombinationKeys(string $taskType): array&#10;    {&#10;        $flavors = $this-&gt;flavorRepository-&gt;findAll();&#10;        $songs = $this-&gt;songRepository-&gt;findAll();&#10;        return match ($taskType) {&#10;            Trial::SMELLS2MUSIC =&gt; array_column($this-&gt;getAllFlavorToMusicCombinations($flavors, $songs), 'comboKey'),&#10;            Trial::MUSICS2SMELL =&gt; array_column($this-&gt;getAllMusicToFlavorCombinations($flavors, $songs), 'comboKey'),&#10;            default =&gt; [],&#10;        };&#10;    }&#10;&#10;    // ...eventuali altri metodi di utilità...&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/task/index.html.twig">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/task/index.html.twig" />
              <option name="originalContent" value="{% extends 'base.html.twig' %}&#10;&#10;{% block title %}{{ task_name }} - S4A Experiment{% endblock %}&#10;&#10;{% block body %}&#10;&lt;div class=&quot;container&quot;&gt;&#10;    &lt;div class=&quot;app-header&quot;&gt;&#10;        &lt;h1 class=&quot;app-title&quot;&gt;{{ task_name }}&lt;/h1&gt;&#10;        {% if task_type == 1 %}&#10;            &lt;p class=&quot;app-subtitle&quot;&gt;Listen to both audio stimuli, smell the perfume, then choose which audio best matches the scent&lt;/p&gt;&#10;        {% else %}&#10;            &lt;p class=&quot;app-subtitle&quot;&gt;Listen to the audio stimulus, then choose which of the two perfumes best matches&lt;/p&gt;&#10;        {% endif %}&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;row&quot;&gt;&#10;        &lt;div class=&quot;col-md-12&quot;&gt;&#10;            {% if task_type == 1 %}&#10;                {# Task 1: Two audio stimuli + one perfume #}&#10;                &lt;div class=&quot;row&quot;&gt;&#10;                    &lt;div class=&quot;col-md-6&quot;&gt;&#10;                        &lt;div class=&quot;card&quot;&gt;&#10;                            &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                &lt;h4 class=&quot;card-title&quot;&gt;Audio Stimuli&lt;/h4&gt;&#10;&#10;                                &lt;div class=&quot;audio-control&quot;&gt;&#10;                                    &lt;h5&gt;Audio Option A&lt;/h5&gt;&#10;                                    &lt;audio controls preload=&quot;metadata&quot;&gt;&#10;                                        &lt;source src=&quot;{{ trial.songs[0].url }}&quot; type=&quot;audio/wav&quot;&gt;&#10;                                        Your browser does not support the audio element.&#10;                                    &lt;/audio&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;audio-control&quot;&gt;&#10;                                    &lt;h5&gt;Audio Option B&lt;/h5&gt;&#10;                                    &lt;audio controls preload=&quot;metadata&quot;&gt;&#10;                                        &lt;source src=&quot;{{ trial.songs[1].url }}&quot; type=&quot;audio/wav&quot;&gt;&#10;                                        Your browser does not support the audio element.&#10;                                    &lt;/audio&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6&quot;&gt;&#10;                        &lt;div class=&quot;card&quot;&gt;&#10;                            &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                &lt;h4 class=&quot;card-title&quot;&gt;Perfume to Smell&lt;/h4&gt;&#10;                                &lt;div class=&quot;icon-lg text-primary mb-3&quot;&gt;&#10;                                    {{ trial.flavor.icon }}&#10;                                &lt;/div&gt;&#10;                                &lt;p class=&quot;card-text&quot;&gt;Please smell the perfume sample provided&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div class=&quot;row mt-4&quot;&gt;&#10;                    &lt;div class=&quot;col-md-12&quot;&gt;&#10;                        &lt;h4 class=&quot;text-center mb-3&quot;&gt;Which audio best matches the perfume?&lt;/h4&gt;&#10;                        &lt;div class=&quot;row&quot;&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;card stimulus-card&quot; data-controller=&quot;stimulus-selector&quot; data-stimulus-selector-choice-value=&quot;A&quot;&gt;&#10;                                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                        &lt;div class=&quot;icon-md text-primary&quot;&gt;&#10;                                            &#10;                                        &lt;/div&gt;&#10;                                        &lt;h5&gt;Choose Audio A&lt;/h5&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;card stimulus-card&quot; data-controller=&quot;stimulus-selector&quot; data-stimulus-selector-choice-value=&quot;B&quot;&gt;&#10;                                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                        &lt;div class=&quot;icon-md text-primary&quot;&gt;&#10;                                            &#10;                                        &lt;/div&gt;&#10;                                        &lt;h5&gt;Choose Audio B&lt;/h5&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;            {% else %}&#10;                {# Task 2: One audio stimulus + two perfume choices #}&#10;                &lt;div class=&quot;row&quot;&gt;&#10;                    &lt;div class=&quot;col-md-12&quot;&gt;&#10;                        &lt;div class=&quot;card mb-4&quot;&gt;&#10;                            &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                &lt;h4 class=&quot;card-title&quot;&gt;Audio Stimulus&lt;/h4&gt;&#10;                                &lt;div class=&quot;audio-control&quot;&gt;&#10;                                    &lt;audio controls preload=&quot;metadata&quot;&gt;&#10;                                        &lt;source src=&quot;{{ trial.song.url }}&quot; type=&quot;audio/wav&quot;&gt;&#10;                                        Your browser does not support the audio element.&#10;                                    &lt;/audio&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div class=&quot;row&quot;&gt;&#10;                    &lt;div class=&quot;col-md-12&quot;&gt;&#10;                        &lt;h4 class=&quot;text-center mb-3&quot;&gt;Which perfume best matches the audio?&lt;/h4&gt;&#10;                        &lt;div class=&quot;row&quot;&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;card stimulus-card&quot; data-controller=&quot;stimulus-selector&quot; data-stimulus-selector-choice-value=&quot;Perfume_1&quot;&gt;&#10;                                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                        &lt;div class=&quot;icon-md text-primary&quot;&gt;&#10;                                            {{ trial.flavors[0].icon }}&#10;                                        &lt;/div&gt;&#10;                                        &lt;h5&gt;Perfume Option 1&lt;/h5&gt;&#10;                                        &lt;p class=&quot;card-text&quot;&gt;Smell the {{ trial.flavors[0] }} sample&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;card stimulus-card&quot; data-controller=&quot;stimulus-selector&quot; data-stimulus-selector-choice-value=&quot;Perfume_2&quot;&gt;&#10;                                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                        &lt;div class=&quot;icon-md text-primary&quot;&gt;&#10;                                            {{ trial.flavors[1].icon }}&#10;                                        &lt;/div&gt;&#10;                                        &lt;h5&gt;Perfume Option 2&lt;/h5&gt;&#10;                                        &lt;p class=&quot;card-text&quot;&gt;Smell the {{ trial.flavors[1] }} sample&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            {% endif %}&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;row mt-4&quot;&gt;&#10;        &lt;div class=&quot;col-md-12 text-center&quot;&gt;&#10;            &lt;button class=&quot;btn btn-secondary me-3&quot; onclick=&quot;window.history.back()&quot;&gt;&#10;                ← Back to Menu&#10;            &lt;/button&gt;&#10;            &lt;button class=&quot;btn btn-primary&quot; id=&quot;submit-choice&quot; disabled data-controller=&quot;submit-handler&quot;&gt;&#10;                Submit Choice →&#10;            &lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;{% endblock %}&#10;" />
              <option name="updatedContent" value="{% extends 'base.html.twig' %}&#10;&#10;{% block title %}{{ task_name }} - S4A Experiment{% endblock %}&#10;&#10;{% block body %}&#10;&lt;div class=&quot;container&quot;&gt;&#10;    &lt;div class=&quot;app-header&quot;&gt;&#10;        &lt;h1 class=&quot;app-title&quot;&gt;{{ task_name }}&lt;/h1&gt;&#10;        {% if task_type == 1 %}&#10;            &lt;p class=&quot;app-subtitle&quot;&gt;Listen to both audio stimuli, smell the perfume, then choose which audio best matches the scent&lt;/p&gt;&#10;        {% else %}&#10;            &lt;p class=&quot;app-subtitle&quot;&gt;Listen to the audio stimulus, then choose which of the two perfumes best matches&lt;/p&gt;&#10;        {% endif %}&#10;    &lt;/div&gt;&#10;&#10;    &lt;form method=&quot;post&quot; id=&quot;trial-form&quot;&gt;&#10;        &lt;input type=&quot;hidden&quot; name=&quot;choice&quot; id=&quot;choice-input&quot; value=&quot;&quot;&gt;&#10;        &lt;div class=&quot;row&quot;&gt;&#10;            &lt;div class=&quot;col-md-12&quot;&gt;&#10;                {% if task_type == 1 %}&#10;                    {# Task 1: Two audio stimuli + one perfume #}&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                    &lt;h4 class=&quot;card-title&quot;&gt;Audio Stimuli&lt;/h4&gt;&#10;&#10;                                    &lt;div class=&quot;audio-control&quot;&gt;&#10;                                        &lt;h5&gt;Audio Option A&lt;/h5&gt;&#10;                                        &lt;audio controls preload=&quot;metadata&quot;&gt;&#10;                                            &lt;source src=&quot;{{ trial.songs[0].url }}&quot; type=&quot;audio/wav&quot;&gt;&#10;                                            Your browser does not support the audio element.&#10;                                        &lt;/audio&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div class=&quot;audio-control&quot;&gt;&#10;                                        &lt;h5&gt;Audio Option B&lt;/h5&gt;&#10;                                        &lt;audio controls preload=&quot;metadata&quot;&gt;&#10;                                            &lt;source src=&quot;{{ trial.songs[1].url }}&quot; type=&quot;audio/wav&quot;&gt;&#10;                                            Your browser does not support the audio element.&#10;                                        &lt;/audio&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;col-md-6&quot;&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                    &lt;h4 class=&quot;card-title&quot;&gt;Perfume to Smell&lt;/h4&gt;&#10;                                    &lt;div class=&quot;icon-lg text-primary mb-3&quot;&gt;&#10;                                        {{ trial.flavor.icon }}&#10;                                    &lt;/div&gt;&#10;                                    &lt;p class=&quot;card-text&quot;&gt;Please smell the perfume sample provided&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;row mt-4&quot;&gt;&#10;                        &lt;div class=&quot;col-md-12&quot;&gt;&#10;                            &lt;h4 class=&quot;text-center mb-3&quot;&gt;Which audio best matches the perfume?&lt;/h4&gt;&#10;                            &lt;div class=&quot;row&quot;&gt;&#10;                                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                    &lt;div class=&quot;card stimulus-card&quot;&#10;                                         data-controller=&quot;stimulus-selector&quot;&#10;                                         data-stimulus-selector-choice-value=&quot;{{ trial.songs[0].id }}&quot;&gt;&#10;                                        &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                            &lt;div class=&quot;icon-md text-primary&quot;&gt;&#10;                                                &#10;                                            &lt;/div&gt;&#10;                                            &lt;h5&gt;Choose Audio A&lt;/h5&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                    &lt;div class=&quot;card stimulus-card&quot;&#10;                                         data-controller=&quot;stimulus-selector&quot;&#10;                                         data-stimulus-selector-choice-value=&quot;{{ trial.songs[1].id }}&quot;&gt;&#10;                                        &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                            &lt;div class=&quot;icon-md text-primary&quot;&gt;&#10;                                                &#10;                                            &lt;/div&gt;&#10;                                            &lt;h5&gt;Choose Audio B&lt;/h5&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                {% else %}&#10;                    {# Task 2: One audio stimulus + two perfume choices #}&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-12&quot;&gt;&#10;                            &lt;div class=&quot;card mb-4&quot;&gt;&#10;                                &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                    &lt;h4 class=&quot;card-title&quot;&gt;Audio Stimulus&lt;/h4&gt;&#10;                                    &lt;div class=&quot;audio-control&quot;&gt;&#10;                                        &lt;audio controls preload=&quot;metadata&quot;&gt;&#10;                                            &lt;source src=&quot;{{ trial.song.url }}&quot; type=&quot;audio/wav&quot;&gt;&#10;                                            Your browser does not support the audio element.&#10;                                        &lt;/audio&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;row&quot;&gt;&#10;                        &lt;div class=&quot;col-md-12&quot;&gt;&#10;                            &lt;h4 class=&quot;text-center mb-3&quot;&gt;Which perfume best matches the audio?&lt;/h4&gt;&#10;                            &lt;div class=&quot;row&quot;&gt;&#10;                                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                    &lt;div class=&quot;card stimulus-card&quot;&#10;                                         data-controller=&quot;stimulus-selector&quot;&#10;                                         data-stimulus-selector-choice-value=&quot;{{ trial.flavors[0].id }}&quot;&gt;&#10;                                        &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                            &lt;div class=&quot;icon-md text-primary&quot;&gt;&#10;                                                {{ trial.flavors[0].icon }}&#10;                                            &lt;/div&gt;&#10;                                            &lt;h5&gt;Perfume Option 1&lt;/h5&gt;&#10;                                            &lt;p class=&quot;card-text&quot;&gt;Smell the {{ trial.flavors[0] }} sample&lt;/p&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                    &lt;div class=&quot;card stimulus-card&quot;&#10;                                         data-controller=&quot;stimulus-selector&quot;&#10;                                         data-stimulus-selector-choice-value=&quot;{{ trial.flavors[1].id }}&quot;&gt;&#10;                                        &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                                            &lt;div class=&quot;icon-md text-primary&quot;&gt;&#10;                                                {{ trial.flavors[1].icon }}&#10;                                            &lt;/div&gt;&#10;                                            &lt;h5&gt;Perfume Option 2&lt;/h5&gt;&#10;                                            &lt;p class=&quot;card-text&quot;&gt;Smell the {{ trial.flavors[1] }} sample&lt;/p&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                {% endif %}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;row mt-4&quot;&gt;&#10;            &lt;div class=&quot;col-md-12 text-center&quot;&gt;&#10;                &lt;button class=&quot;btn btn-secondary me-3&quot; type=&quot;button&quot; onclick=&quot;window.history.back()&quot;&gt;&#10;                    ← Back to Menu&#10;                &lt;/button&gt;&#10;                &lt;button class=&quot;btn btn-primary&quot; id=&quot;submit-choice&quot; type=&quot;submit&quot; disabled&gt;&#10;                    Submit Choice →&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/form&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;script&gt;&#10;    // Aggiorna il campo hidden e abilita il submit quando una carta viene selezionata&#10;    document.addEventListener('DOMContentLoaded', function () {&#10;        document.querySelectorAll('.stimulus-card[data-controller=&quot;stimulus-selector&quot;]').forEach(card =&gt; {&#10;            card.addEventListener('click', function () {&#10;                const choice = card.getAttribute('data-stimulus-selector-choice-value');&#10;                document.getElementById('choice-input').value = choice;&#10;                document.getElementById('submit-choice').disabled = false;&#10;            });&#10;        });&#10;    });&#10;&lt;/script&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
