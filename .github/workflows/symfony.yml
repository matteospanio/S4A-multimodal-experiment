# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Symfony

on:
    push:
        branches: [ "master" ]
    pull_request:
        branches: [ "master" ]

permissions:
    contents: read

jobs:
    symfony-tests:
        runs-on: ubuntu-latest

        # 1) definiamo il servizio Postgres
        services:
            postgres:
                image: postgres:13-alpine
                env:
                    POSTGRES_DB: test_db
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                ports:
                    - 5432:5432
                # health check per aspettare che sia pronto
                options: >-
                    --health-cmd "pg_isready -U postgres"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - uses: actions/checkout@v4

            # 2) PHP + estensioni pdo_pgsql
            - uses: shivammathur/setup-php@2cb9b829437ee246e9b3cac53555a39208ca6d28
              with:
                  php-version: '8.3'
                  extensions: mbstring, intl, pdo, pdo_pgsql

            # 3) Copia del .env di test
            - name: Copy .env.test.local
              run: php -r "file_exists('.env.test.local') || copy('.env.test', '.env.test.local');"

            # 4) Override della variabile DATABASE_URL per puntare a Postgres
            - name: Configure DATABASE_URL for Postgres
              run: |
                  echo "DATABASE_URL=postgresql://postgres:postgres@127.0.0.1:5432/test_db?serverVersion=13&charset=utf8" >> .env.test.local

            # 5) Attendi che Postgres sia pronto
            - name: Wait for Postgres
              run: |
                  until pg_isready -h 127.0.0.1 -p 5432 -U postgres; do
                    echo "Waiting for Postgres..."
                    sleep 1
                  done

            # 6) Cache di vendor
            - name: Cache Composer packages
              id: composer-cache
              uses: actions/cache@v3
              with:
                  path: vendor
                  key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-php-

            # 7) Installa dipendenze
            - name: Install Dependencies
              run: composer install --no-progress --prefer-dist

            # 8) Creazione del database + schema
            - name: Create and Migrate Database
              run: |
                  php bin/console doctrine:database:create --env=test --if-not-exists
                  php bin/console doctrine:schema:update --force --env=test

            # 9) Esecuzione dei test
            - name: Execute tests via PHPUnit
              run: php bin/phpunit
